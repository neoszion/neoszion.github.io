(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{306:function(v,_,a){"use strict";a.r(_);var r=a(14),e=Object(r.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"搜推架构介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#搜推架构介绍"}},[v._v("#")]),v._v(" 搜推架构介绍")]),v._v(" "),_("p",[v._v("这里以电商搜推为样例进行的设计，也不是很完善。希望大家多提提意见，加以修正。")]),v._v(" "),_("h2",{attrs:{id:"整体架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#整体架构"}},[v._v("#")]),v._v(" 整体架构")]),v._v(" "),_("p",[_("a",{attrs:{"data-fancybox":"",title:"搜推简易框架",href:"/images/search-simple-framework.jpg"}},[_("img",{attrs:{src:"/images/search-simple-framework.jpg",alt:"搜推简易框架"}})])]),v._v(" "),_("ul",[_("li",[_("b",[v._v("客户端:")]),v._v(" 主要是指用户请求的入口，包含APP、网页版或者其他系统的请求。")]),v._v(" "),_("li",[_("b",[v._v("在线层：")]),v._v("这里主要是指搜索推荐的在线系统，一般是Java系统。业务复杂后，需要对系统进行拆分，可以根据业务进行分拆，比如搜索系统、推荐系统和引导词系统。搜索系统也可以进一步的分拆，比如店铺搜索、商品搜索等。也可以对一些逻辑进行抽象，比如下面会提到的图执行框架。")]),v._v(" "),_("li",[_("b",[v._v("引擎层：")]),v._v("搜推引擎。根据业务的不同也会有不同的引擎，整体逻辑一致，只是加载的业务数据和业务逻辑会不一样。")]),v._v(" "),_("li",[_("b",[v._v("DUMP：")]),v._v("负责对业务数据进行运算，运算后的数据提供给引擎消费。")]),v._v(" "),_("li",[_("b",[v._v("原始数据：")]),v._v("这里包含的是原始业务数据。比如商家中心产出的店铺数据和商品数据。")]),v._v(" "),_("li",[_("b",[v._v("模型：")]),v._v(" 提供精排打分服务。这里包含对外服务、模型加载和模型训练等。数据一般包含用户特征和埋点数据等。")])]),v._v(" "),_("h2",{attrs:{id:"在线层视角"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#在线层视角"}},[v._v("#")]),v._v(" 在线层视角")]),v._v(" "),_("p",[_("a",{attrs:{"data-fancybox":"",title:"在线层框架",href:"/images/search-online-framework.jpg"}},[_("img",{attrs:{src:"/images/search-online-framework.jpg",alt:"在线层框架"}})])]),v._v(" "),_("p",[v._v("基于引擎为众多个性化业务（搜索、推荐、广告等）提供在线服务能力。搜推业务被抽象成一张有向无环图，以此让业务开发同学不需要关心并发问题和执行流程，更专注的开发业务逻辑。我会实现一个简单的图执行框架，有兴趣的同学可以参考阿里的TP。")]),v._v(" "),_("ul",[_("li",[_("b",[v._v("prepare: ")]),v._v(" 准备数据。比如对用户请求里的部分数据进行转换后用于请求引擎。")]),v._v(" "),_("li",[_("b",[v._v("searcher: ")]),v._v(" 请求引擎。一般包含三个方法，请求构建、下发请求和结果解析。")]),v._v(" "),_("li",[_("b",[v._v("filter: ")]),v._v(" 过滤。由用户指定过滤规则或者运营提供的过滤规则。")]),v._v(" "),_("li",[_("b",[v._v("scorer: ")]),v._v(" 打分排序。包含静态打分和动态打分。静态打分是指利用引擎返回的字段和一些静态规则算出分数，动态打分是指请求模型服务在线打分，会利用用户特征。 这里也可以多拆分出一个 ranker，用于排序。")]),v._v(" "),_("li",[_("b",[v._v("compose: ")]),v._v(" 数据补全。引擎一般返回的都是静态数据，但是像实时优惠信息等一般不会进入引擎（优惠数据一般波动都很大，数据扩散也很大，容易导致实时链路堵塞。），所以根据引擎返回的10到20个数据去请求优惠信息。")]),v._v(" "),_("li",[_("b",[v._v("resultbuild: ")]),v._v(" 结果构建。构建符合业务需求的数据。")])]),v._v(" "),_("h2",{attrs:{id:"引擎视角"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#引擎视角"}},[v._v("#")]),v._v(" 引擎视角")]),v._v(" "),_("p",[v._v("一个完整的搜索链路一般有如下几个步骤：")]),v._v(" "),_("ul",[_("li",[v._v("一阶段召回\n"),_("ul",[_("li",[v._v("用于海选，数据量大，排序简单。")])])]),v._v(" "),_("li",[v._v("粗排截断")]),v._v(" "),_("li",[v._v("二阶段召回\n"),_("ul",[_("li",[v._v("数据量小，排序复杂。")])])]),v._v(" "),_("li",[v._v("精排")]),v._v(" "),_("li",[v._v("返回数据")])]),v._v(" "),_("p",[v._v("这些串联工作一般会在召回层（SP）处理。由SP去请求搜索引擎并对返回的结果进行处理。\n由此可以看出，SP 其实就是串联整个搜推系统的，作为一个粘合剂的存在。")]),v._v(" "),_("p",[v._v("引擎可以分为单机引擎和分布式引擎")]),v._v(" "),_("ul",[_("li",[v._v("单机版引擎指的是每台引擎服务器独立加载所有数据并对外提供完整的搜索服务。")]),v._v(" "),_("li",[v._v("分布式引擎指的是多台引擎服务器各自负责一部分数据，想要得到完整的数据，需要多台引擎配合完成。")])]),v._v(" "),_("p",[v._v("Q: 为什么会需要分布式引擎？")]),v._v(" "),_("p",[v._v("A: 原因很多，为了性能（每台服务只处理整个索引中的部分索引，性能自然会更好）；为了能加载更多的数据（比如一个业务的所以有200G，单机引擎内存只有100G，那么这时候就不得不需要对数据进行拆分。）等等。")]),v._v(" "),_("p",[v._v("单机引擎主要包含几个大的模块")]),v._v(" "),_("ul",[_("li",[v._v("查询/排序模块")]),v._v(" "),_("li",[v._v("索引管理")]),v._v(" "),_("li",[v._v("基础依赖模块")])]),v._v(" "),_("p",[v._v("如果是分布式引擎，那么还需要对引擎进行分层")]),v._v(" "),_("ul",[_("li",[v._v("proxy 层\n"),_("ul",[_("li",[v._v("proxy 层用于对外部请求的路由、多列结果的合并等")])])]),v._v(" "),_("li",[v._v("worker 层\n"),_("ul",[_("li",[v._v("内部是一个多行多列系统，每一行是一个完整的数据，同一份数据拆分到多个机器上称之为列。worker 负责具体的索引查询和一些通用的逻辑，比如通用的线性加权等。")])])])]),v._v(" "),_("p",[v._v("另外，还需要一个配套的调度系统，用于管理引擎。比如索引构建调度、索引更新、模型加载和引擎配置等。")]),v._v(" "),_("p",[_("a",{attrs:{"data-fancybox":"",title:"引擎框架",href:"/images/search-engine-framework.jpg"}},[_("img",{attrs:{src:"/images/search-engine-framework.jpg",alt:"引擎框架"}})])]),v._v(" "),_("p",[v._v("这里主要是用一个单机版的引擎作为一个示例，所以相对比较简单，后续在涉及到每个系统的时候会单独再进行详细的分解。\n整个搜推引擎自身涉及的周边系统是很多的。")]),v._v(" "),_("ul",[_("li",[v._v("SP（Search Plan）搜索流程编排服务，相当于搜推业务的粘合剂。")]),v._v(" "),_("li",[v._v("QP（Query Parser）用于关键字解析（分词、相似词等）.")]),v._v(" "),_("li",[v._v("CP（Category Parser）用于电商场景下的类目意图解析。")]),v._v(" "),_("li",[v._v("RS (Rank Service) 用于精排打分服务，会请求模型和特征中心。 这个系统不是必须存在的，这里画出来是给出一个目前大家通用的方式。")]),v._v(" "),_("li",[v._v("RTP（RealTime Prediction） 用于精排打分，会存储模型数据。和RS的区别在于，RS 会封装了一些打分框架和一些业务插件，对业务更加友好。")]),v._v(" "),_("li",[v._v("训练平台 一般包含特征加工、样本生成、模型训练（在/离线）和模型发布上线等一套完整的流程。")]),v._v(" "),_("li",[v._v("引擎 这里的引擎是一个单机版引擎的简单示例。如果是分布式的引擎，那么会更复杂。")]),v._v(" "),_("li",[v._v("调度系统 用于管理引擎，比如索引加载、资源管理和模型加载等。")])]),v._v(" "),_("h2",{attrs:{id:"dump-视角"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dump-视角"}},[v._v("#")]),v._v(" dump 视角")]),v._v(" "),_("p",[v._v("DUMP 主要是用来处理业务数据转换成引擎数据的一个系统。 一般来说，DUMP 的架构分为三个阶段：")]),v._v(" "),_("ul",[_("li",[v._v("源数流入")]),v._v(" "),_("li",[v._v("数据补全")]),v._v(" "),_("li",[v._v("数据导出")])]),v._v(" "),_("p",[v._v("DUMP 架构根据业务的发展程度有着不同的架构，比如一个小型创业型公司，那么就没有必要考虑DUMP平台化，而是直接创建一些任务流即可。 如果是一个大型公司且拥有很多的搜推广数据加工需求，那么就需要考虑平台化产品化。 这两种不同的模式对DUMP系统来说，整体架构没有太大的变动。 一个典型的DUMP架构如下：\n"),_("a",{attrs:{"data-fancybox":"",title:"DUMP框架",href:"/images/search-dump-framework.jpg"}},[_("img",{attrs:{src:"/images/search-dump-framework.jpg",alt:"DUMP框架"}})])]),v._v(" "),_("ol",[_("li",[v._v("平台接收到数据变更的消息后（比如监听DB的Binlog），对消息进行转换后，写入镜像表后再写入队列中触发后续计算")]),v._v(" "),_("li",[v._v("计算过程中会用到其他表的数据，这时候只需要查镜像表的数据，然后根据用户规则进行计算。")]),v._v(" "),_("li",[v._v("计算完成后，数据同步产出到结果表和外部消息队列。结果表供后续全量数据产出使用，消息队列用于引擎增量。")])]),v._v(" "),_("h2",{attrs:{id:"模型视角"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#模型视角"}},[v._v("#")]),v._v(" 模型视角")]),v._v(" "),_("p",[v._v("模型相关的主要包含了以下几个模板：")]),v._v(" "),_("ul",[_("li",[v._v("特征中心")]),v._v(" "),_("li",[v._v("样本生成")]),v._v(" "),_("li",[v._v("模型训练")]),v._v(" "),_("li",[v._v("模型服务")])]),v._v(" "),_("p",[v._v("这几个模块都是非常浩大而又复杂的领域，这里只是先从框架的角度来看待，后续会有详细的介绍。\n"),_("a",{attrs:{"data-fancybox":"",title:"模型框架",href:"/images/search-model-framework.jpg"}},[_("img",{attrs:{src:"/images/search-model-framework.jpg",alt:"模型框架"}})])])])}),[],!1,null,null,null);_.default=e.exports}}]);